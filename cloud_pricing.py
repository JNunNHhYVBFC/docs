from typing import Dict, List, Optional
import json

class CloudPricing:
    def __init__(self):
        # –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        self.prices = {
            "compute": {
                "cpu_hour": 4.75,  # –¶–µ–Ω–∞ –∑–∞ —á–∞—Å CPU
                "ram_gb_hour": 1.58,  # –¶–µ–Ω–∞ –∑–∞ —á–∞—Å –ì–ë RAM
                "disk_gb_month": 0.93,  # –¶–µ–Ω–∞ –∑–∞ –ì–ë –¥–∏—Å–∫–∞ –≤ –º–µ—Å—è—Ü
            },
            "storage": {
                "gb_month": 0.15,  # –¶–µ–Ω–∞ –∑–∞ –ì–ë –≤ –º–µ—Å—è—Ü
                "operations": {
                    "read": 0.0000876,  # –¶–µ–Ω–∞ –∑–∞ 1000 –æ–ø–µ—Ä–∞—Ü–∏–π —á—Ç–µ–Ω–∏—è
                    "write": 0.0008766,  # –¶–µ–Ω–∞ –∑–∞ 1000 –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏
                }
            },
            "database": {
                "postgresql": {
                    "small": 2950,  # –¶–µ–Ω–∞ –≤ –º–µ—Å—è—Ü –∑–∞ –º–∞–ª—ã–π –∏–Ω—Å—Ç–∞–Ω—Å
                    "medium": 5900,  # –¶–µ–Ω–∞ –≤ –º–µ—Å—è—Ü –∑–∞ —Å—Ä–µ–¥–Ω–∏–π –∏–Ω—Å—Ç–∞–Ω—Å
                    "large": 11800,  # –¶–µ–Ω–∞ –≤ –º–µ—Å—è—Ü –∑–∞ –±–æ–ª—å—à–æ–π –∏–Ω—Å—Ç–∞–Ω—Å
                }
            }
        }

    def calculate_vm_cost(self, cpu: int, ram: int, disk: int, hours: int = 730) -> Dict:
        """
        –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã
        
        :param cpu: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä CPU
        :param ram: –û–±—ä–µ–º RAM –≤ –ì–ë
        :param disk: –û–±—ä–µ–º –¥–∏—Å–∫–∞ –≤ –ì–ë
        :param hours: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–µ—Å—è—Ü)
        :return: –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞—Å—á–µ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        """
        cpu_cost = self.prices["compute"]["cpu_hour"] * cpu * hours
        ram_cost = self.prices["compute"]["ram_gb_hour"] * ram * hours
        disk_cost = self.prices["compute"]["disk_gb_month"] * disk
        
        total = cpu_cost + ram_cost + disk_cost
        
        return {
            "total": round(total, 2),
            "details": {
                "cpu": round(cpu_cost, 2),
                "ram": round(ram_cost, 2),
                "disk": round(disk_cost, 2)
            },
            "monthly_estimate": round(total, 2)
        }

    def get_service_recommendation(self, requirements: Dict) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –≤—ã–±–æ—Ä—É —Å–µ—Ä–≤–∏—Å–æ–≤
        
        :param requirements: –°–ª–æ–≤–∞—Ä—å —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
        :return: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        recommendations = {
            "recommended_services": [],
            "cost_estimate": {},
            "explanation": ""
        }
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        if requirements.get("type") == "web_app":
            if requirements.get("traffic", 0) < 1000:
                recommendations["recommended_services"].append({
                    "name": "Cloud Functions",
                    "reason": "–î–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –Ω–∏–∑–∫–∏–º —Ç—Ä–∞—Ñ–∏–∫–æ–º"
                })
            else:
                recommendations["recommended_services"].append({
                    "name": "Compute Cloud",
                    "reason": "–î–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –≤—ã—Å–æ–∫–∏–º —Ç—Ä–∞—Ñ–∏–∫–æ–º"
                })
        
        elif requirements.get("type") == "database":
            if requirements.get("data_size", 0) < 100:
                recommendations["recommended_services"].append({
                    "name": "Managed Service for PostgreSQL (small)",
                    "reason": "–î–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"
                })
            else:
                recommendations["recommended_services"].append({
                    "name": "Managed Service for PostgreSQL (medium)",
                    "reason": "–î–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –∏ –±–æ–ª—å—à–∏—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"
                })
        
        return recommendations

    def format_price_message(self, calculation: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å—á–µ—Ç–æ–º —Ü–µ–Ω—ã
        
        :param calculation: –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞—Å—á–µ—Ç–æ–º
        :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        message = "üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:\n\n"
        message += f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {calculation['total']} ‚ÇΩ/–º–µ—Å\n\n"
        message += "üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:\n"
        message += f"‚Ä¢ CPU: {calculation['details']['cpu']} ‚ÇΩ\n"
        message += f"‚Ä¢ RAM: {calculation['details']['ram']} ‚ÇΩ\n"
        message += f"‚Ä¢ –î–∏—Å–∫: {calculation['details']['disk']} ‚ÇΩ\n"
        
        return message

    def get_pricing_info(self, service: str) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–∞—Ö –Ω–∞ —Å–µ—Ä–≤–∏—Å
        
        :param service: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        :return: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö
        """
        if service == "compute":
            return f"""
üíª –¶–µ–Ω—ã –Ω–∞ Compute Cloud:

‚Ä¢ CPU: {self.prices['compute']['cpu_hour']} ‚ÇΩ/—á–∞—Å –∑–∞ —è–¥—Ä–æ
‚Ä¢ RAM: {self.prices['compute']['ram_gb_hour']} ‚ÇΩ/—á–∞—Å –∑–∞ –ì–ë
‚Ä¢ –î–∏—Å–∫: {self.prices['compute']['disk_gb_month']} ‚ÇΩ/–º–µ—Å—è—Ü –∑–∞ –ì–ë

–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
/calculate_vm [cpu] [ram] [disk]
–ù–∞–ø—Ä–∏–º–µ—Ä: /calculate_vm 2 4 100
            """
        
        elif service == "storage":
            return f"""
üíæ –¶–µ–Ω—ã –Ω–∞ Object Storage:

‚Ä¢ –•—Ä–∞–Ω–µ–Ω–∏–µ: {self.prices['storage']['gb_month']} ‚ÇΩ/–º–µ—Å—è—Ü –∑–∞ –ì–ë
‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è: {self.prices['storage']['operations']['read']} ‚ÇΩ –∑–∞ 1000 –æ–ø–µ—Ä–∞—Ü–∏–π
‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏: {self.prices['storage']['operations']['write']} ‚ÇΩ –∑–∞ 1000 –æ–ø–µ—Ä–∞—Ü–∏–π
            """
        
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö –Ω–∞ –¥–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
